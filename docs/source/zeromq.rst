=======
ZeroMQ
=======

버클리 소켓 모델
-------------
통신 경로의 지역 끝점(local endpoint)에 대한 추상화된 API 집합이다.
네트워크 통신 뿐만 아니라 프로세스간 통신에 대해서도 일반화 되어 있다. 따라서 다양한 프로토콜과 주소 구성을 지원할 수 있다.
처음에는 하나의 프로토콜이 여러 개의 주소 유형을 지원하도록 했으나, 분리의 필요성이 사라져서 프로토콜과 주소 구성이 하나의 쌍 처럼 되었다.

socket(): 소켓을 시스템에 할당하고, 생성된 핸들을 반환한다.
bind(): 소켓을 주어진 '소켓 주소 구조체'(주소)와 연관시킨다.
listen(): [TCP 전용] 주소와 연관된 소켓을 원격(remote)의 연결을 받을 수 있도록 활성화한다.
connect(): 소켓을 시스템의 적절한 빈 자리(포트)에 대입한다. [TCP 전용] 주어진 주소로 연결을 시도한다.
accept(): [TCP 전용] 소켓에 대한 원격의 연결 시도를 받아들이고 지역-원격 끝점 쌍으로 연관되는 자식 소켓을 만들어 반환한다.
send(), recv(), sendto(), recvfrom(): 데이터를 송/수신한다.
close(): 소켓을 할당 해제한다. [TCP 전용] 그리고 연결을 종료한다.

https://en.wikipedia.org/wiki/Berkeley_sockets

ZeroMQ의 사용
------------
버클리 소켓과 같은 인터페이스를 제공하므로 버클리 소켓의 또 다른 구현이라고 간주하고 사용하면 된다.
비동기 메시징에 주로 사용되는 패턴들을 모델로 일반화 해두었다.

REQ-REP 패턴
------------
요청(Request) - 응답(Reply) 패턴이다.
클라이언트가 질문하면 서버가 답변한다.

PUB-SUB 패턴
------------
발행(Publish) - 구독(Subscribe) 패턴이다.

분할-정복 구조
------------

AMQP와의 차별점
-------------
메시징 브로커가 없어서 매우 빠르지만 메시지의 전달을 보장하지 않는다.

https://zguide.zeromq.org/docs/chapter2/#Missing-Message-Problem-Solver
